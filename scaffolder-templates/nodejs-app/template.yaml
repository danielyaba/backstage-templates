apiVersion: scaffolder.backstage.io/v1beta3
# https://backstage.io/docs/features/software-catalog/descriptor-format#kind-template
kind: Template
metadata:
  name: create-nodejs-app-template
  title: Create NodeJS App Template
  description: A template for the scaffolder that creates a simple NodeJS service
  tags:
    - nodejs
spec:
  owner: group:devops-team
  type: service

  # These parameters are used to generate the input form in the frontend, and are
  # used to gather input data for the execution of the template.
  parameters:
    - title: Fill in some steps
      required:
        - name
      properties:
        name:
          title: Name
          type: string
          description: Unique name of the component
          ui:autofocus: true
          ui:options:
            rows: 5
    - title: Choose a location
      required:
        - repoUrl
        - gcpProjectId
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com
            allowedOwners:
              - danielyaba
        gcpProjectId:
          titie: GCP Project ID
          type: string
          description: GCP Project ID for Artifact-Registry

  # These steps are executed in the scaffolder backend, using data that we gathered
  # via the parameters above.
  steps:
    # Each step executes an action, in this case one templates files into the working directory.
    - id: install-gcloud-and-fetch-project-number
      name: Install GCLOUD-CLI and Fetch Project Number
      action: shell:run
      input:
        script: |
          #!/bin/bash
          set -e

          # Install gcloud SDK
          echo "Installing gcloud CLI..."
          curl https://sdk.cloud.google.com > install.sh
          bash install.sh --disable-prompts

          # Fetch the project number
          echo "Fetching project number for project ID: ${{ parameters.gcpProjectId }}"
          PROJECT_NUMBER=$(gcloud projects describe ${{ parameters.gcpProjectId }} --format="value(projectNumber)")
          echo "::set-output name=projectNumber::$PROJECT_NUMBER"

    - id: fetch-base
      name: Fetch Base
      action: fetch:template
      input:
        url: ./skeleton
        copyWithoutTemplating:
          - .github/workflows/*
        values:
          name: ${{ parameters.name }}

    # This step publishes the contents of the working directory to GitHub.
    - id: publish
      name: Publish
      action: publish:github
      input:
        allowedHosts: ['github.com']
        description: This is ${{ parameters.name }}
        repoUrl: ${{ parameters.repoUrl }}
        # repoVisibility: public
        secrets:
           GCP_CICD_SA:  ${{ parameters.name }}@${{ parameters.gcpProjectId }}.iam.gserviceaccount.com
           GCP_PROJECT_ID: ${{ parameters.gcpProjectId }}
           GCP_PROJECT_NUMBER: ${{ steps['install-gcloud-and-fetch-project-number'].output.projectNumber }}

    # The final step is to register our new component in the catalog.
    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps['publish'].output.repoContentsUrl }}
        catalogInfoPath: '/catalog-info.yaml'

  # Outputs are displayed to the user after a successful execution of the template.
  output:
    links:
      - title: Repository
        url: ${{ steps['publish'].output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps['register'].output.entityRef }}
