apiVersion: scaffolder.backstage.io/v1beta3
# https://backstage.io/docs/features/software-catalog/descriptor-format#kind-template
kind: Template
metadata:
  name: create-nodejs-app-template
  title: Create NodeJS App Template
  description: A template for the scaffolder that creates a simple NodeJS service
  tags:
    - nodejs
spec:
  owner: group:devops-team
  type: service

  # These parameters are used to generate the input form in the frontend, and are
  # used to gather input data for the execution of the template.
  parameters:
    - title: Fill in some steps
      required:
        - name
      properties:
        name:
          title: Name
          type: string
          description: Unique name of the component
          ui:autofocus: true
          ui:options:
            rows: 5
    - title: Choose a location
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com
            allowedOwners:
              - danielyaba
    - title: Fill in container registry credentials
      required:
        - registryUsername
        - registryToken
      properties:
        registryUsername:
          title: Username
          type: string
          description: The username for the container registry
          ui:autofocus: false
        registryToken:
          title: Token
          type: string
          description: The token for the container registry
          ui:field: Secret
        


  # These steps are executed in the scaffolder backend, using data that we gathered
  # via the parameters above.
  steps:
    # Each step executes an action, in this case one templates files into the working directory.
    - id: fetch-base
      name: Fetch Base
      action: fetch:template
      input:
        url: ./skeleton
        copyWithoutRender:
          - .github/workflows/*
        values:
          name: ${{ parameters.name }}
          registryUsername: ${{ parameters.registryUsername }}
          registryToken: ${{ secrets.registryToken }}

    # This step publishes the contents of the working directory to GitHub.
    - id: publish
      name: Publish
      action: publish:github
      input:
        allowedHosts: ['github.com']
        description: This is ${{ parameters.name }}
        repoUrl: ${{ parameters.repoUrl }}
        secrets:
           DOCKERHUB_USERNAME: ${{ parameters.registryUsername }}
           DOCKERHUB_TOKEN: ${{ secrets.registryToken }}

    - id: github-action
      name: Trigger workflow
      action: github:actions:dispath
      input:
        workflowId: build-push.yaml
        repoUrl: ${{ steps['publish'].output.repoContentsUrl }}
        branchOrTagName: 'master'


    # The final step is to register our new component in the catalog.
    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps['publish'].output.repoContentsUrl }}
        catalogInfoPath: '/catalog-info.yaml'

  # Outputs are displayed to the user after a successful execution of the template.
  output:
    links:
      - title: Repository
        url: ${{ steps['publish'].output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps['register'].output.entityRef }}
